type BasketId @entity {
  id: String!
  owner: Player!
  vault: Vault! # uint256
  name: String!
  rebalancingPeriod: BigInt # uint256
  redeemedRewards: BigInt! # uint256
  unredeemedRewards: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Player @entity {
  id: Bytes!
  baskets: [BasketId!]! @derivedFrom(field: "owner")
  # address
  # performance fee
  # medals
}

type Vault @entity(immutable: true) {
  id: String!
  name: String!
  network: String! # string
  protocol: String! # string
  coin: String! # string
  category: String! # string
  vaultNumber: BigInt!
  protocols: [Protocol]! @derivedFrom(field: "vault")
  # amount of players
  # total staked tokens
  # performance fee of players
  # performance vault
}

type Protocol @entity(immutable: true) {
  id: String!
  name: String! # string
  network: String! # string
  protocol: String! # string
  coin: String! # string
  vault: Vault! # uint256
  provider: Bytes! # address
  protocolLPToken: Bytes! # address
  underlying: Bytes! # address
  govToken: Bytes! # address
  protocolNumber: BigInt! # uint256
}
