// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BasketId extends ethereum.Event {
  get params(): BasketId__Params {
    return new BasketId__Params(this);
  }
}

export class BasketId__Params {
  _event: BasketId;

  constructor(event: BasketId) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get basketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vaultNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PushProtocolAllocations extends ethereum.Event {
  get params(): PushProtocolAllocations__Params {
    return new PushProtocolAllocations__Params(this);
  }
}

export class PushProtocolAllocations__Params {
  _event: PushProtocolAllocations;

  constructor(event: PushProtocolAllocations) {
    this._event = event;
  }

  get chain(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get deltas(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class PushedAllocationsToController extends ethereum.Event {
  get params(): PushedAllocationsToController__Params {
    return new PushedAllocationsToController__Params(this);
  }
}

export class PushedAllocationsToController__Params {
  _event: PushedAllocationsToController;

  constructor(event: PushedAllocationsToController) {
    this._event = event;
  }

  get vaultNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deltas(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class RebalanceBasket extends ethereum.Event {
  get params(): RebalanceBasket__Params {
    return new RebalanceBasket__Params(this);
  }
}

export class RebalanceBasket__Params {
  _event: RebalanceBasket;

  constructor(event: RebalanceBasket) {
    this._event = event;
  }

  get basketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rebalancingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unredeemedRewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get redeemedRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Game extends ethereum.SmartContract {
  static bind(address: Address): Game {
    return new Game("Game", address);
  }

  BASE_SCALE(): BigInt {
    let result = super.call("BASE_SCALE", "BASE_SCALE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_SCALE", "BASE_SCALE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketAllocationInProtocol(
    _basketId: BigInt,
    _chainId: BigInt,
    _protocolId: BigInt
  ): BigInt {
    let result = super.call(
      "basketAllocationInProtocol",
      "basketAllocationInProtocol(uint256,uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_basketId),
        ethereum.Value.fromUnsignedBigInt(_chainId),
        ethereum.Value.fromUnsignedBigInt(_protocolId)
      ]
    );

    return result[0].toBigInt();
  }

  try_basketAllocationInProtocol(
    _basketId: BigInt,
    _chainId: BigInt,
    _protocolId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketAllocationInProtocol",
      "basketAllocationInProtocol(uint256,uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_basketId),
        ethereum.Value.fromUnsignedBigInt(_chainId),
        ethereum.Value.fromUnsignedBigInt(_protocolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketRedeemedRewards(_basketId: BigInt): BigInt {
    let result = super.call(
      "basketRedeemedRewards",
      "basketRedeemedRewards(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );

    return result[0].toBigInt();
  }

  try_basketRedeemedRewards(_basketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketRedeemedRewards",
      "basketRedeemedRewards(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketTotalAllocatedTokens(_basketId: BigInt): BigInt {
    let result = super.call(
      "basketTotalAllocatedTokens",
      "basketTotalAllocatedTokens(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );

    return result[0].toBigInt();
  }

  try_basketTotalAllocatedTokens(
    _basketId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketTotalAllocatedTokens",
      "basketTotalAllocatedTokens(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketUnredeemedRewards(_basketId: BigInt): BigInt {
    let result = super.call(
      "basketUnredeemedRewards",
      "basketUnredeemedRewards(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );

    return result[0].toBigInt();
  }

  try_basketUnredeemedRewards(_basketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketUnredeemedRewards",
      "basketUnredeemedRewards(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(_basketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainIds(param0: BigInt): BigInt {
    let result = super.call("chainIds", "chainIds(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_chainIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chainIds", "chainIds(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  derbyToken(): Address {
    let result = super.call("derbyToken", "derbyToken():(address)", []);

    return result[0].toAddress();
  }

  try_derbyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("derbyToken", "derbyToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainIds(): Array<BigInt> {
    let result = super.call("getChainIds", "getChainIds():(uint32[])", []);

    return result[0].toBigIntArray();
  }

  try_getChainIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getChainIds", "getChainIds():(uint32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getDao(): Address {
    let result = super.call("getDao", "getDao():(address)", []);

    return result[0].toAddress();
  }

  try_getDao(): ethereum.CallResult<Address> {
    let result = super.tryCall("getDao", "getDao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeltaAllocationChain(_vaultNumber: BigInt, _chainId: BigInt): BigInt {
    let result = super.call(
      "getDeltaAllocationChain",
      "getDeltaAllocationChain(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultNumber),
        ethereum.Value.fromUnsignedBigInt(_chainId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDeltaAllocationChain(
    _vaultNumber: BigInt,
    _chainId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeltaAllocationChain",
      "getDeltaAllocationChain(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultNumber),
        ethereum.Value.fromUnsignedBigInt(_chainId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeltaAllocationProtocol(
    _vaultNumber: BigInt,
    _chainId: BigInt,
    _protocolNum: BigInt
  ): BigInt {
    let result = super.call(
      "getDeltaAllocationProtocol",
      "getDeltaAllocationProtocol(uint256,uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultNumber),
        ethereum.Value.fromUnsignedBigInt(_chainId),
        ethereum.Value.fromUnsignedBigInt(_protocolNum)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDeltaAllocationProtocol(
    _vaultNumber: BigInt,
    _chainId: BigInt,
    _protocolNum: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeltaAllocationProtocol",
      "getDeltaAllocationProtocol(uint256,uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultNumber),
        ethereum.Value.fromUnsignedBigInt(_chainId),
        ethereum.Value.fromUnsignedBigInt(_protocolNum)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGuardian(): Address {
    let result = super.call("getGuardian", "getGuardian():(address)", []);

    return result[0].toAddress();
  }

  try_getGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall("getGuardian", "getGuardian():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumberOfRewardsReceived(_vaultNumber: BigInt): BigInt {
    let result = super.call(
      "getNumberOfRewardsReceived",
      "getNumberOfRewardsReceived(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRewardsReceived(
    _vaultNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRewardsReceived",
      "getNumberOfRewardsReceived(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRebalancingPeriod(_vaultNumber: BigInt): BigInt {
    let result = super.call(
      "getRebalancingPeriod",
      "getRebalancingPeriod(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );

    return result[0].toBigInt();
  }

  try_getRebalancingPeriod(_vaultNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRebalancingPeriod",
      "getRebalancingPeriod(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  homeVault(param0: BigInt): Address {
    let result = super.call("homeVault", "homeVault(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_homeVault(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("homeVault", "homeVault(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isXChainRebalancing(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "isXChainRebalancing",
      "isXChainRebalancing(uint256,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isXChainRebalancing(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isXChainRebalancing",
      "isXChainRebalancing(uint256,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeStamp(param0: BigInt): BigInt {
    let result = super.call(
      "lastTimeStamp",
      "lastTimeStamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastTimeStamp(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeStamp",
      "lastTimeStamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestProtocolId(param0: BigInt): BigInt {
    let result = super.call(
      "latestProtocolId",
      "latestProtocolId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_latestProtocolId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestProtocolId",
      "latestProtocolId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintNewBasket(_vaultNumber: BigInt): BigInt {
    let result = super.call(
      "mintNewBasket",
      "mintNewBasket(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );

    return result[0].toBigInt();
  }

  try_mintNewBasket(_vaultNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintNewBasket",
      "mintNewBasket(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebalanceInterval(): BigInt {
    let result = super.call(
      "rebalanceInterval",
      "rebalanceInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceInterval",
      "rebalanceInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceNeeded(_vaultNumber: BigInt): boolean {
    let result = super.call(
      "rebalanceNeeded",
      "rebalanceNeeded(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );

    return result[0].toBoolean();
  }

  try_rebalanceNeeded(_vaultNumber: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rebalanceNeeded",
      "rebalanceNeeded(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_vaultNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenPrice(param0: BigInt): BigInt {
    let result = super.call("tokenPrice", "tokenPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenPrice(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  xProvider(): Address {
    let result = super.call("xProvider", "xProvider():(address)", []);

    return result[0].toAddress();
  }

  try_xProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall("xProvider", "xProvider():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _derbyToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _dao(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _guardian(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class MintNewBasketCall extends ethereum.Call {
  get inputs(): MintNewBasketCall__Inputs {
    return new MintNewBasketCall__Inputs(this);
  }

  get outputs(): MintNewBasketCall__Outputs {
    return new MintNewBasketCall__Outputs(this);
  }
}

export class MintNewBasketCall__Inputs {
  _call: MintNewBasketCall;

  constructor(call: MintNewBasketCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintNewBasketCall__Outputs {
  _call: MintNewBasketCall;

  constructor(call: MintNewBasketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PushAllocationsToControllerCall extends ethereum.Call {
  get inputs(): PushAllocationsToControllerCall__Inputs {
    return new PushAllocationsToControllerCall__Inputs(this);
  }

  get outputs(): PushAllocationsToControllerCall__Outputs {
    return new PushAllocationsToControllerCall__Outputs(this);
  }
}

export class PushAllocationsToControllerCall__Inputs {
  _call: PushAllocationsToControllerCall;

  constructor(call: PushAllocationsToControllerCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PushAllocationsToControllerCall__Outputs {
  _call: PushAllocationsToControllerCall;

  constructor(call: PushAllocationsToControllerCall) {
    this._call = call;
  }
}

export class PushAllocationsToVaultsCall extends ethereum.Call {
  get inputs(): PushAllocationsToVaultsCall__Inputs {
    return new PushAllocationsToVaultsCall__Inputs(this);
  }

  get outputs(): PushAllocationsToVaultsCall__Outputs {
    return new PushAllocationsToVaultsCall__Outputs(this);
  }
}

export class PushAllocationsToVaultsCall__Inputs {
  _call: PushAllocationsToVaultsCall;

  constructor(call: PushAllocationsToVaultsCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _chain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushAllocationsToVaultsCall__Outputs {
  _call: PushAllocationsToVaultsCall;

  constructor(call: PushAllocationsToVaultsCall) {
    this._call = call;
  }
}

export class RebalanceBasketCall extends ethereum.Call {
  get inputs(): RebalanceBasketCall__Inputs {
    return new RebalanceBasketCall__Inputs(this);
  }

  get outputs(): RebalanceBasketCall__Outputs {
    return new RebalanceBasketCall__Outputs(this);
  }
}

export class RebalanceBasketCall__Inputs {
  _call: RebalanceBasketCall;

  constructor(call: RebalanceBasketCall) {
    this._call = call;
  }

  get _basketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _deltaAllocations(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }
}

export class RebalanceBasketCall__Outputs {
  _call: RebalanceBasketCall;

  constructor(call: RebalanceBasketCall) {
    this._call = call;
  }
}

export class RedeemRewardsCall extends ethereum.Call {
  get inputs(): RedeemRewardsCall__Inputs {
    return new RedeemRewardsCall__Inputs(this);
  }

  get outputs(): RedeemRewardsCall__Outputs {
    return new RedeemRewardsCall__Outputs(this);
  }
}

export class RedeemRewardsCall__Inputs {
  _call: RedeemRewardsCall;

  constructor(call: RedeemRewardsCall) {
    this._call = call;
  }

  get _basketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemRewardsCall__Outputs {
  _call: RedeemRewardsCall;

  constructor(call: RedeemRewardsCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetChainIdsCall extends ethereum.Call {
  get inputs(): SetChainIdsCall__Inputs {
    return new SetChainIdsCall__Inputs(this);
  }

  get outputs(): SetChainIdsCall__Outputs {
    return new SetChainIdsCall__Outputs(this);
  }
}

export class SetChainIdsCall__Inputs {
  _call: SetChainIdsCall;

  constructor(call: SetChainIdsCall) {
    this._call = call;
  }

  get _chainIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetChainIdsCall__Outputs {
  _call: SetChainIdsCall;

  constructor(call: SetChainIdsCall) {
    this._call = call;
  }
}

export class SetDaoCall extends ethereum.Call {
  get inputs(): SetDaoCall__Inputs {
    return new SetDaoCall__Inputs(this);
  }

  get outputs(): SetDaoCall__Outputs {
    return new SetDaoCall__Outputs(this);
  }
}

export class SetDaoCall__Inputs {
  _call: SetDaoCall;

  constructor(call: SetDaoCall) {
    this._call = call;
  }

  get _dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDaoCall__Outputs {
  _call: SetDaoCall;

  constructor(call: SetDaoCall) {
    this._call = call;
  }
}

export class SetDerbyTokenCall extends ethereum.Call {
  get inputs(): SetDerbyTokenCall__Inputs {
    return new SetDerbyTokenCall__Inputs(this);
  }

  get outputs(): SetDerbyTokenCall__Outputs {
    return new SetDerbyTokenCall__Outputs(this);
  }
}

export class SetDerbyTokenCall__Inputs {
  _call: SetDerbyTokenCall;

  constructor(call: SetDerbyTokenCall) {
    this._call = call;
  }

  get _derbyToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDerbyTokenCall__Outputs {
  _call: SetDerbyTokenCall;

  constructor(call: SetDerbyTokenCall) {
    this._call = call;
  }
}

export class SetGuardianCall extends ethereum.Call {
  get inputs(): SetGuardianCall__Inputs {
    return new SetGuardianCall__Inputs(this);
  }

  get outputs(): SetGuardianCall__Outputs {
    return new SetGuardianCall__Outputs(this);
  }
}

export class SetGuardianCall__Inputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }

  get _guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardianCall__Outputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }
}

export class SetHomeVaultCall extends ethereum.Call {
  get inputs(): SetHomeVaultCall__Inputs {
    return new SetHomeVaultCall__Inputs(this);
  }

  get outputs(): SetHomeVaultCall__Outputs {
    return new SetHomeVaultCall__Outputs(this);
  }
}

export class SetHomeVaultCall__Inputs {
  _call: SetHomeVaultCall;

  constructor(call: SetHomeVaultCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _homeVault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetHomeVaultCall__Outputs {
  _call: SetHomeVaultCall;

  constructor(call: SetHomeVaultCall) {
    this._call = call;
  }
}

export class SetLatestProtocolIdCall extends ethereum.Call {
  get inputs(): SetLatestProtocolIdCall__Inputs {
    return new SetLatestProtocolIdCall__Inputs(this);
  }

  get outputs(): SetLatestProtocolIdCall__Outputs {
    return new SetLatestProtocolIdCall__Outputs(this);
  }
}

export class SetLatestProtocolIdCall__Inputs {
  _call: SetLatestProtocolIdCall;

  constructor(call: SetLatestProtocolIdCall) {
    this._call = call;
  }

  get _chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _latestProtocolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLatestProtocolIdCall__Outputs {
  _call: SetLatestProtocolIdCall;

  constructor(call: SetLatestProtocolIdCall) {
    this._call = call;
  }
}

export class SetNegativeRewardFactorCall extends ethereum.Call {
  get inputs(): SetNegativeRewardFactorCall__Inputs {
    return new SetNegativeRewardFactorCall__Inputs(this);
  }

  get outputs(): SetNegativeRewardFactorCall__Outputs {
    return new SetNegativeRewardFactorCall__Outputs(this);
  }
}

export class SetNegativeRewardFactorCall__Inputs {
  _call: SetNegativeRewardFactorCall;

  constructor(call: SetNegativeRewardFactorCall) {
    this._call = call;
  }

  get _factor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNegativeRewardFactorCall__Outputs {
  _call: SetNegativeRewardFactorCall;

  constructor(call: SetNegativeRewardFactorCall) {
    this._call = call;
  }
}

export class SetNegativeRewardThresholdCall extends ethereum.Call {
  get inputs(): SetNegativeRewardThresholdCall__Inputs {
    return new SetNegativeRewardThresholdCall__Inputs(this);
  }

  get outputs(): SetNegativeRewardThresholdCall__Outputs {
    return new SetNegativeRewardThresholdCall__Outputs(this);
  }
}

export class SetNegativeRewardThresholdCall__Inputs {
  _call: SetNegativeRewardThresholdCall;

  constructor(call: SetNegativeRewardThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNegativeRewardThresholdCall__Outputs {
  _call: SetNegativeRewardThresholdCall;

  constructor(call: SetNegativeRewardThresholdCall) {
    this._call = call;
  }
}

export class SetNumberOfRewardsReceivedCall extends ethereum.Call {
  get inputs(): SetNumberOfRewardsReceivedCall__Inputs {
    return new SetNumberOfRewardsReceivedCall__Inputs(this);
  }

  get outputs(): SetNumberOfRewardsReceivedCall__Outputs {
    return new SetNumberOfRewardsReceivedCall__Outputs(this);
  }
}

export class SetNumberOfRewardsReceivedCall__Inputs {
  _call: SetNumberOfRewardsReceivedCall;

  constructor(call: SetNumberOfRewardsReceivedCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetNumberOfRewardsReceivedCall__Outputs {
  _call: SetNumberOfRewardsReceivedCall;

  constructor(call: SetNumberOfRewardsReceivedCall) {
    this._call = call;
  }
}

export class SetRebalanceIntervalCall extends ethereum.Call {
  get inputs(): SetRebalanceIntervalCall__Inputs {
    return new SetRebalanceIntervalCall__Inputs(this);
  }

  get outputs(): SetRebalanceIntervalCall__Outputs {
    return new SetRebalanceIntervalCall__Outputs(this);
  }
}

export class SetRebalanceIntervalCall__Inputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }

  get _timestampInternal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebalanceIntervalCall__Outputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }
}

export class SetRebalancingStateCall extends ethereum.Call {
  get inputs(): SetRebalancingStateCall__Inputs {
    return new SetRebalancingStateCall__Inputs(this);
  }

  get outputs(): SetRebalancingStateCall__Outputs {
    return new SetRebalancingStateCall__Outputs(this);
  }
}

export class SetRebalancingStateCall__Inputs {
  _call: SetRebalancingStateCall;

  constructor(call: SetRebalancingStateCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _chain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _state(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetRebalancingStateCall__Outputs {
  _call: SetRebalancingStateCall;

  constructor(call: SetRebalancingStateCall) {
    this._call = call;
  }
}

export class SetTokenPriceCall extends ethereum.Call {
  get inputs(): SetTokenPriceCall__Inputs {
    return new SetTokenPriceCall__Inputs(this);
  }

  get outputs(): SetTokenPriceCall__Outputs {
    return new SetTokenPriceCall__Outputs(this);
  }
}

export class SetTokenPriceCall__Inputs {
  _call: SetTokenPriceCall;

  constructor(call: SetTokenPriceCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenPriceCall__Outputs {
  _call: SetTokenPriceCall;

  constructor(call: SetTokenPriceCall) {
    this._call = call;
  }
}

export class SetVaultAddressCall extends ethereum.Call {
  get inputs(): SetVaultAddressCall__Inputs {
    return new SetVaultAddressCall__Inputs(this);
  }

  get outputs(): SetVaultAddressCall__Outputs {
    return new SetVaultAddressCall__Outputs(this);
  }
}

export class SetVaultAddressCall__Inputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetVaultAddressCall__Outputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }
}

export class SetXProviderCall extends ethereum.Call {
  get inputs(): SetXProviderCall__Inputs {
    return new SetXProviderCall__Inputs(this);
  }

  get outputs(): SetXProviderCall__Outputs {
    return new SetXProviderCall__Outputs(this);
  }
}

export class SetXProviderCall__Inputs {
  _call: SetXProviderCall;

  constructor(call: SetXProviderCall) {
    this._call = call;
  }

  get _xProvider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetXProviderCall__Outputs {
  _call: SetXProviderCall;

  constructor(call: SetXProviderCall) {
    this._call = call;
  }
}

export class SettleRewardsCall extends ethereum.Call {
  get inputs(): SettleRewardsCall__Inputs {
    return new SettleRewardsCall__Inputs(this);
  }

  get outputs(): SettleRewardsCall__Outputs {
    return new SettleRewardsCall__Outputs(this);
  }
}

export class SettleRewardsCall__Inputs {
  _call: SettleRewardsCall;

  constructor(call: SettleRewardsCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewards(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SettleRewardsCall__Outputs {
  _call: SettleRewardsCall;

  constructor(call: SettleRewardsCall) {
    this._call = call;
  }
}

export class SettleRewardsGuardCall extends ethereum.Call {
  get inputs(): SettleRewardsGuardCall__Inputs {
    return new SettleRewardsGuardCall__Inputs(this);
  }

  get outputs(): SettleRewardsGuardCall__Outputs {
    return new SettleRewardsGuardCall__Outputs(this);
  }
}

export class SettleRewardsGuardCall__Inputs {
  _call: SettleRewardsGuardCall;

  constructor(call: SettleRewardsGuardCall) {
    this._call = call;
  }

  get _vaultNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewards(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SettleRewardsGuardCall__Outputs {
  _call: SettleRewardsGuardCall;

  constructor(call: SettleRewardsGuardCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
